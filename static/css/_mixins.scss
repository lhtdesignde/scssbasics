 //
 // ---------------------------------------------------------------------------------------------------- #
 //
 // Mixins
 //
 //


// Mixins for Standards
@mixin clearfix {
    /* fix f√ºr safari */
    display: block;

    &:after {
        visibility: hidden;
        display: block;
        clear: both;
        height: 0;
        font-size: 0;
        content: ".";
    }
}

@mixin block { overflow: hidden; };

@mixin ellipsis { overflow: hidden; width: 100%; text-overflow: ellipsis; white-space: nowrap; -o-text-overflow: ellipsis; }
@mixin hyphens { -ms-word-break: break-all; word-break: break-word; hyphens: auto; -webkit-hyphens: auto; -moz-hyphens: auto; }

@mixin show { display: block; }
@mixin hide { display: none; }
@mixin invisible { visibility: hidden; }

@mixin visuallyhidden {
    overflow: hidden;
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: 0;
    padding: 0;
    clip: rect(0 0 0 0);

    .focusable:active,
    .focusable:focus {
        overflow: visible;
        position: static;
        width: auto;
        height: auto;
        margin: 0;
        clip: auto;
    }
}


// font size - line height in em mixin, needs $default_font_size
@mixin font-height-em ( $font_size, $line_height, $base_font_size: $default_font_size ) {

    $font_size_em: round(($font-size / $base_font_size)*10000)/10000;
    $line_height_em: round(($line_height / $font_size)*10000)/10000;

    font-size: $font_size_em + em; /* #{$font_size + px} */
    line-height: $line_height_em + em; /* #{$line_height + px} */
}

// font size - line height in rem mixin
@mixin font-height ( $font_size, $line_height ) {

    $font_size_in_rem: round(($font-size / $default_font_size)*10000)/10000;
    $line_height_unitless: round(($line_height / $font_size)*10000)/10000;

    font-size: $font_size + px;
    font-size: $font_size_in_rem + rem; /* #{$font_size + px} */
    line-height: $line_height_unitless; /* #{$line_height + px} */
}

// mediaqueries inc fallback
@mixin respond-to($medias...) {
    $breakpoints_length: length($respond-to-breakpoints);

    @each $media in $medias {
        $had_a_hit: false;

        @for $i from 1 through $breakpoints_length {
            $breakpoint: nth($respond-to-breakpoints, $i);

            @if $media == nth($breakpoint, 1) {
                $definition: nth($breakpoint, 2);
                $had_a_hit: true;

                @media #{$definition} {
                    @content;
                }
            }
        }

        @if $media == $respond-to-no-mediaqueries-fallback {
            .#{$respond-to-fallback-class} & {
                @content;
            }
        }

        @if $had_a_hit == false {
            @warn "Media #{media} not found!";
        }
    }
}